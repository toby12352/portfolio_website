/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/main_room.glb -k 
*/

import { Howl } from "howler";
import * as THREE from "three";
import React, { useEffect, useRef, useMemo, useState } from "react";
import {
  useGLTF,
  useTexture,
  useCubeTexture,
  useVideoTexture,
} from "@react-three/drei";
import gsap from "gsap";
import { useThree, useFrame } from "@react-three/fiber";
import { motion } from "framer-motion-3d";
import themeVertexShader from "../shaders/theme/vertex.glsl?raw";
import themeFragmentShader from "../shaders/theme/fragment.glsl?raw";
import { mx_bilerp_0 } from "three/src/nodes/materialx/lib/mx_noise.js";

let pianoDebounceTimer = null;
const PIANO_TIMEOUT = 2000;
const pianoKeyMap = {
  C1_Key: "Key_24",
  "C#1_Key": "Key_23",
  D1_Key: "Key_22",
  "D#1_Key": "Key_21",
  E1_Key: "Key_20",
  F1_Key: "Key_19",
  "F#1_Key": "Key_18",
  G1_Key: "Key_17",
  "G#1_Key": "Key_16",
  A1_Key: "Key_15",
  "A#1_Key": "Key_14",
  B1_Key: "Key_13",
  C2_Key: "Key_12",
  "C#2_Key": "Key_11",
  D2_Key: "Key_10",
  "D#2_Key": "Key_9",
  E2_Key: "Key_8",
  F2_Key: "Key_7",
  "F#2_Key": "Key_6",
  G2_Key: "Key_5",
  "G#2_Key": "Key_4",
  A2_Key: "Key_3",
  "A#2_Key": "Key_2",
  B2_Key: "Key_1",
};

// Background Music
let isMuted = false;
let isMusicFaded = false;
const MUSIC_FADE_TIME = 500;

const BACKGROUND_MUSIC_VOLUME = 1;
const FADED_VOLUME = 0;

const backgroundMusic = new Howl({
  src: ["/audio/music/cosmic_candy.ogg"],
  loop: true,
  volume: 1,
});

const fadeOutBackgroundMusic = () => {
  if (!isMuted && !isMusicFaded) {
    backgroundMusic.fade(
      backgroundMusic.volume(),
      FADED_VOLUME,
      MUSIC_FADE_TIME
    );
    isMusicFaded = true;
  }
};

const fadeInBackgroundMusic = () => {
  if (!isMuted && isMusicFaded) {
    backgroundMusic.fade(
      FADED_VOLUME,
      BACKGROUND_MUSIC_VOLUME,
      MUSIC_FADE_TIME
    );
    isMusicFaded = false;
  }
};

// 🔊 Preload piano sounds
const pianoSounds = Object.fromEntries(
  Object.values(pianoKeyMap).map((soundKey) => [
    soundKey,
    new Howl({
      src: [`/audio/sfx/piano/${soundKey}.ogg`],
      preload: true,
      volume: 0.5,
    }),
  ])
);

// 🔊 Preload button sounds
const buttonSounds = {
  click: new Howl({
    src: ["/audio/sfx/click/bubble.ogg"],
    preload: true,
    volume: 0.5,
  }),
};

// 🌐 Social Links
const socialLinks = {
  GitHub: "https://github.com/hlahtoo",
  YouTube: "https://www.youtube.com/@HlaHtoo-wk5ng",
  Twitter: "https://www.linkedin.com/in/hlahtoo/",
};

function playHoverAnimation(object, isHovering) {
  if (!object) return;

  // Ensure object has initial values stored
  if (!object.userData.initialScale) {
    object.userData.initialScale = object.scale.clone();
  }
  if (!object.userData.initialRotation) {
    object.userData.initialRotation = object.rotation.clone();
  }
  if (!object.userData.initialPosition) {
    object.userData.initialPosition = object.position.clone();
  }

  let scale = isHovering ? 1.4 : 1;
  if (
    object.name.includes("Fish") ||
    object.name.includes("About_Button") ||
    object.name.includes("Contact_Button") ||
    object.name.includes("My_Work_Button")
  ) {
    scale = isHovering ? 1.1 : 1;
  }

  gsap.killTweensOf(object.scale);
  gsap.killTweensOf(object.rotation);
  gsap.killTweensOf(object.position);

  if (isHovering) {
    gsap.to(object.scale, {
      x: object.userData.initialScale.x * scale,
      y: object.userData.initialScale.y * scale,
      z: object.userData.initialScale.z * scale,
      duration: 0.5,
      ease: "back.out(2)",
    });

    if (object.name.includes("About_Button")) {
      gsap.to(object.rotation, {
        x: object.userData.initialRotation.x - Math.PI / 10,
        duration: 0.5,
        ease: "back.out(2)",
      });
    } else if (
      object.name.includes("Contact_Button") ||
      object.name.includes("My_Work_Button") ||
      object.name.includes("GitHub") ||
      object.name.includes("YouTube") ||
      object.name.includes("Twitter")
    ) {
      gsap.to(object.rotation, {
        x: object.userData.initialRotation.x + Math.PI / 10,
        duration: 0.5,
        ease: "back.out(2)",
      });
    }

    if (object.name.includes("Boba") || object.name.includes("Name_Letter")) {
      gsap.to(object.position, {
        y: object.userData.initialPosition.y + 0.2,
        duration: 0.5,
        ease: "back.out(2)",
      });
    }
  } else {
    // Reset scale, rotation, and position to initial values
    gsap.to(object.scale, {
      x: object.userData.initialScale.x,
      y: object.userData.initialScale.y,
      z: object.userData.initialScale.z,
      duration: 0.3,
      ease: "back.out(2)",
    });

    gsap.to(object.rotation, {
      x: object.userData.initialRotation.x,
      duration: 0.3,
      ease: "back.out(2)",
    });

    gsap.to(object.position, {
      y: object.userData.initialPosition.y,
      duration: 0.3,
      ease: "back.out(2)",
    });
  }
}

export function OfficeNew(props) {
  const { section, onSectionChange, onReady } = props;
  const { scene, nodes, materials } = useGLTF("models/main_room.glb");

  const raycaster = useRef(new THREE.Raycaster());
  const pointer = useRef(new THREE.Vector2());
  const { camera, gl } = useThree(); // ✅ Access the camera
  const xAxisFans = useRef({});
  const yAxisFans = useRef({});
  const hoveredObject = useRef(null);
  const textureMap = {
    First: useTexture("/textures/room/day/first_texture_set_day.webp"),
    Second: useTexture("/textures/room/day/second_texture_set_day.webp"),
    Third: useTexture("/textures/room/day/third_texture_set_day.webp"),
    Fourth: useTexture("/textures/room/day/fourth_texture_set_day.webp"),
  };

  const mainRoomRef = useRef();

  // 🎯 Interactive elements
  const plank1Ref = useRef();
  const plank2Ref = useRef();
  const workBtnRef = useRef();
  const aboutBtnRef = useRef();
  const contactBtnRef = useRef();

  const bobaRef = useRef();
  const githubRef = useRef();
  const youtubeRef = useRef();
  const twitterRef = useRef();

  const flower1Ref = useRef();
  const flower2Ref = useRef();
  const flower3Ref = useRef();
  const flower4Ref = useRef();
  const flower5Ref = useRef();

  const box1Ref = useRef();
  const box2Ref = useRef();
  const box3Ref = useRef();

  const lampRef = useRef();
  const slippers1Ref = useRef();
  const slippers2Ref = useRef();

  const egg1Ref = useRef();
  const egg2Ref = useRef();
  const egg3Ref = useRef();

  const frame1Ref = useRef();
  const frame2Ref = useRef();
  const frame3Ref = useRef();

  const fishRef = useRef();
  const pianoKeysRefs = useRef({});

  // ✨ Letter refs
  const letterRefs = useRef([]); // push in order of 1 to 8
  const [shouldPlayIntro, setShouldPlayIntro] = useState(false);
  const texturesApplied = useRef(false);

  Object.values(textureMap).forEach((texture) => {
    texture.flipY = false;
    texture.colorSpace = THREE.SRGBColorSpace;
    texture.minFilter = THREE.LinearFilter;
    texture.magFilter = THREE.LinearFilter;
  });

  const environmentMap = useCubeTexture(
    ["px.webp", "nx.webp", "py.webp", "ny.webp", "pz.webp", "nz.webp"],
    { path: "textures/skybox/" }
  );
  // Create materials
  const createMaterialForTextureSet = (textureSet) => {
    return new THREE.ShaderMaterial({
      uniforms: {
        uDayTexture1: { value: textureMap.First },
        uDayTexture2: { value: textureMap.Second },
        uDayTexture3: { value: textureMap.Third },
        uDayTexture4: { value: textureMap.Fourth },
        uMixRatio: { value: 0 },
        uTextureSet: { value: textureSet },
      },
      vertexShader: themeVertexShader,
      fragmentShader: themeFragmentShader,
    });
  };

  const roomMaterials = useMemo(
    () => ({
      First: createMaterialForTextureSet(1),
      Second: createMaterialForTextureSet(2),
      Third: createMaterialForTextureSet(3),
      Fourth: createMaterialForTextureSet(4),
    }),
    [textureMap]
  );

  const glassMaterial = new THREE.MeshPhysicalMaterial({
    transmission: 1,
    opacity: 1,
    color: 0xfbfbfb,
    metalness: 0,
    roughness: 0,
    ior: 3,
    thickness: 0.01,
    specularIntensity: 1,
    envMap: environmentMap,
    envMapIntensity: 1,
    depthWrite: false,
    specularColor: 0xfbfbfb,
  });

  const whiteMaterial = new THREE.MeshBasicMaterial({
    color: 0xffffff,
  });

  function resetScaleToZero(ref) {
    if (ref.current) {
      const obj = ref.current;
      if (!obj.userData.initialScale) {
        obj.userData.initialScale = obj.scale.clone();
      }
      if (!obj.userData.initialRotation) {
        obj.userData.initialRotation = obj.rotation.clone();
      }
      if (!obj.userData.initialPosition) {
        obj.userData.initialPosition = obj.position.clone();
      }

      obj.scale.set(0, 0, 0);
    }
  }
  useEffect(() => {
    if (!mainRoomRef.current) return;

    // Reset all ref'd objects' scale to zero
    [
      plank1Ref,
      plank2Ref,
      workBtnRef,
      aboutBtnRef,
      contactBtnRef,
      bobaRef,
      githubRef,
      youtubeRef,
      twitterRef,
      flower1Ref,
      flower2Ref,
      flower3Ref,
      flower4Ref,
      flower5Ref,
      box1Ref,
      box2Ref,
      box3Ref,
      lampRef,
      slippers1Ref,
      slippers2Ref,
      egg1Ref,
      egg2Ref,
      egg3Ref,
      frame1Ref,
      frame2Ref,
      frame3Ref,
      fishRef,
      // if you pushed 8 letterRefs into this array
    ].forEach(resetScaleToZero);
  }, []);
  // 🎥 Use `useVideoTexture` Instead of Manually Creating a Video Element
  const videoTexture = useVideoTexture("/textures/video/Screen.mp4");
  function playIntroAnimation() {
    const t1 = gsap.timeline({
      defaults: { duration: 0.8, ease: "back.out(1.8)" },
    });
    t1.timeScale(0.8);

    t1.to(plank1Ref.current.scale, { x: 1, y: 1 })
      .to(plank2Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5")
      .to(workBtnRef.current.scale, { x: 1, y: 1, z: 1 }, "-=0.6")
      .to(aboutBtnRef.current.scale, { x: 1, y: 1, z: 1 }, "-=0.6")
      .to(contactBtnRef.current.scale, { x: 1, y: 1, z: 1 }, "-=0.6");

    const tFrames = gsap.timeline({
      defaults: { duration: 0.8, ease: "back.out(1.8)" },
    });
    tFrames.timeScale(0.8);

    tFrames
      .to(frame1Ref.current.scale, { x: 1, y: 1, z: 1 })
      .to(frame2Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5")
      .to(frame3Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5");

    const t2 = gsap.timeline({
      defaults: { duration: 0.8, ease: "back.out(1.8)" },
    });
    t2.timeScale(0.8);

    t2.to(bobaRef.current.scale, { x: 1, y: 1, z: 1, delay: 0.4 })
      .to(githubRef.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5")
      .to(youtubeRef.current.scale, { x: 1, y: 1, z: 1 }, "-=0.6")
      .to(twitterRef.current.scale, { x: 1, y: 1, z: 1 }, "-=0.6");

    const tFlowers = gsap.timeline({
      defaults: { duration: 0.8, ease: "back.out(1.8)" },
    });
    tFlowers.timeScale(0.8);

    tFlowers
      .to(flower5Ref.current.scale, { x: 1, y: 1, z: 1 })
      .to(flower4Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5")
      .to(flower3Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5")
      .to(flower2Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5")
      .to(flower1Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5");

    const tBoxes = gsap.timeline({
      defaults: { duration: 0.8, ease: "back.out(1.8)" },
    });
    tBoxes.timeScale(0.8);

    tBoxes
      .to(box1Ref.current.scale, { x: 1, y: 1, z: 1 })
      .to(box2Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5")
      .to(box3Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5");

    const tLamp = gsap.timeline({
      defaults: { duration: 0.8, delay: 0.2, ease: "back.out(1.8)" },
    });
    tLamp.timeScale(0.8);
    tLamp.to(lampRef.current.scale, { x: 1, y: 1, z: 1 });

    const tSlippers = gsap.timeline({
      defaults: { duration: 0.8, ease: "back.out(1.8)" },
    });
    tSlippers.timeScale(0.8);

    tSlippers
      .to(slippers1Ref.current.scale, { x: 1, y: 1, z: 1, delay: 0.5 })
      .to(slippers2Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5");

    const tEggs = gsap.timeline({
      defaults: { duration: 0.8, ease: "back.out(1.8)" },
    });
    tEggs.timeScale(0.8);

    tEggs
      .to(egg1Ref.current.scale, { x: 1, y: 1, z: 1 })
      .to(egg2Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5")
      .to(egg3Ref.current.scale, { x: 1, y: 1, z: 1 }, "-=0.5");

    const tFish = gsap.timeline({
      defaults: { delay: 0.8, duration: 0.8, ease: "back.out(1.8)" },
    });
    tFish.timeScale(0.8);

    tFish.to(fishRef.current.scale, { x: 1, y: 1, z: 1 });

    const orderedKeyNames = [
      "C1_Key",
      "Cs1_Key",
      "D1_Key",
      "Ds1_Key",
      "E1_Key",
      "F1_Key",
      "Fs1_Key",
      "G1_Key",
      "Gs1_Key",
      "A1_Key",
      "As1_Key",
      "B1_Key",
      "C2_Key",
      "Cs2_Key",
      "D2_Key",
      "Ds2_Key",
      "E2_Key",
      "F2_Key",
      "Fs2_Key",
      "G2_Key",
      "Gs2_Key",
      "A2_Key",
      "As2_Key",
      "B2_Key",
    ];

    const pianoKeysTl = gsap.timeline({
      defaults: { duration: 0.4, ease: "back.out(1.7)" },
    });
    pianoKeysTl.timeScale(1.2);

    orderedKeyNames.forEach((key, index) => {
      const pianoKey = pianoKeysRefs.current[key];
      if (pianoKey) {
        pianoKeysTl
          .to(
            pianoKey.position,
            {
              y: pianoKey.userData.initialPosition.y + 0.2,
              duration: 0.4,
              ease: "back.out(1.8)",
            },
            index * 0.1
          )
          .to(
            pianoKey.scale,
            {
              x: 1,
              y: 1,
              z: 1,
              duration: 0.4,
              ease: "back.out(1.8)",
            },
            "<"
          )
          .to(
            pianoKey.position,
            {
              y: pianoKey.userData.initialPosition.y,
              duration: 0.4,
              ease: "back.out(1.8)",
            },
            ">-0.2"
          );
      }
    });
  }

  useEffect(() => {
    if (shouldPlayIntro) {
      console.log("⏳ Waiting 2s before playing intro animation...");
      const timer = setTimeout(() => {
        console.log("🎬 Playing intro animation now!");
        playIntroAnimation();
      }, 500);

      return () => clearTimeout(timer); // cleanup in case component unmounts
    }
  }, [shouldPlayIntro]);

  useEffect(() => {
    scene.traverse((child) => {
      if (child.isMesh) {
        if (child.name.includes("Water")) {
          child.material = new THREE.MeshBasicMaterial({
            color: 0x558bc8,
            transparent: true,
            opacity: 0.4,
            depthWrite: false,
          });
        } else if (child.name.includes("Glass")) {
          child.material = glassMaterial;
        } else if (child.name.includes("Bubble")) {
          child.material = whiteMaterial;
        } else if (child.name.includes("Screen")) {
          child.material = new THREE.MeshBasicMaterial({
            map: videoTexture,
            transparent: true,
            opacity: 0.9,
          });
        } else {
          Object.keys(textureMap).forEach((key) => {
            if (child.name.includes(key)) {
              child.material = roomMaterials[key];
            }
          });
        }
        Object.keys(pianoKeyMap).forEach((keyName) => {
          if (child.name.includes(keyName)) {
            // Clean key name: replace # with s to avoid issues like "C#1" -> "Cs1"
            const cleanKey = keyName.replace("#", "s");
            pianoKeysRefs.current[cleanKey] = child;

            child.scale.set(0, 0, 0); // Hide initially
            child.userData.initialPosition = child.position.clone(); // Store position for animation
          }
        });
      }
    });
    setShouldPlayIntro(true);
    console.log("texture applied and onReady set");
    if (onReady) onReady();
  }, []);

  const xFanRefs = useRef({});
  const yFanRefs = useRef({});

  useFrame(() => {
    Object.values(xFanRefs.current).forEach((fan) => {
      if (fan) {
        fan.rotation.x += 0.04;
      }
    });
    Object.values(yFanRefs.current).forEach((fan) => {
      if (fan) {
        fan.rotation.y += 0.04;
      }
    });
    // console.log(hourHandRef);
  });

  useFrame(({ clock }) => {
    if (!hourHandRef.current || !minuteHandRef.current) return;

    const now = new Date();
    const hours = now.getHours() % 12;
    const minutes = now.getMinutes();
    const seconds = now.getSeconds();

    const minuteAngle = (minutes + seconds / 60) * ((Math.PI * 2) / 60);
    const hourAngle = (hours + minutes / 60) * ((Math.PI * 2) / 12);

    minuteHandRef.current.rotation.x = -minuteAngle;
    hourHandRef.current.rotation.x = -hourAngle;

    if (chairTopRef.current) {
      const time = clock.getElapsedTime();
      const baseAmplitude = Math.PI / 8;

      const rotationOffset =
        baseAmplitude *
        Math.sin(time * 0.5) *
        (1 - Math.abs(Math.sin(time * 0.5)) * 0.3);

      chairTopRef.current.rotation.y =
        chairTopRef.current.userData.initialRotation.y + rotationOffset;
    }

    if (fishRef.current) {
      const time = clock.getElapsedTime() * 1.5; // Equivalent to timestamp * 0.0015
      const amplitude = 0.12;

      const positionOffset =
        amplitude * Math.sin(time) * (1 - Math.abs(Math.sin(time)) * 0.1);

      fishRef.current.position.y =
        fishRef.current.userData.initialPosition.y + positionOffset;
    }
  });

  const minuteHandRef = useRef();
  const hourHandRef = useRef();
  const chairTopRef = useRef();

  const raycastableObjectsRef = useRef([]);
  const hoveredObjectRef = useRef(null);

  useEffect(() => {
    if (chairTopRef.current) {
      chairTopRef.current.userData.initialRotation = {
        y: chairTopRef.current.rotation.y,
      };
    }
    if (fishRef.current) {
      fishRef.current.userData.initialPosition = {
        y: fishRef.current.position.y,
      };
    }
  }, []);

  useEffect(() => {
    if (mainRoomRef.current) {
      minuteHandRef.current =
        mainRoomRef.current.getObjectByName("Minute_Hand_First");
      hourHandRef.current =
        mainRoomRef.current.getObjectByName("Hour_Hand_First");

      raycastableObjectsRef.current = [];

      mainRoomRef.current.traverse((child) => {
        if (!child.isMesh) return;

        const isRaycastable = child.name.includes("Raycaster");

        if (isRaycastable) {
          raycastableObjectsRef.current.push(child);
        }

        // ✅ Always store ALL initial states once
        if (!child.userData.initialRotation) {
          child.userData.initialRotation = child.rotation.clone();
        }
        if (!child.userData.initialScale) {
          child.userData.initialScale = child.scale.clone();
        }
        if (!child.userData.initialPosition) {
          child.userData.initialPosition = child.position.clone();
        }

        // ✅ Piano keys setup
        Object.keys(pianoKeyMap).forEach((keyName) => {
          if (child.name.includes(keyName)) {
            const cleanKey = keyName.replace("#", "s");
            pianoKeysRefs.current[cleanKey] = child;

            // Hide initially
            child.scale.set(0, 0, 0);
          }
        });
      });
    }
  }, [mainRoomRef]);

  // Playing Piano Key Raycaster Interaction
  function handleRaycasterInteraction(currentIntersects) {
    if (currentIntersects.length === 0) return;

    const object = currentIntersects[0].object;
    console.log("hello");
    // 🔘 Play Button Click Sound
    if (object.name.includes("Button")) {
      buttonSounds.click.play();
    }

    // 🎹 Piano Key Interaction
    Object.entries(pianoKeyMap).forEach(([keyName, soundKey]) => {
      if (object.name.includes(keyName)) {
        if (pianoDebounceTimer) {
          clearTimeout(pianoDebounceTimer);
        }

        fadeOutBackgroundMusic();
        pianoSounds[soundKey].play();

        pianoDebounceTimer = setTimeout(() => {
          fadeInBackgroundMusic();
        }, PIANO_TIMEOUT);

        gsap.to(object.rotation, {
          x: object.userData.initialRotation.x + Math.PI / 42,
          duration: 0.4,
          ease: "back.out(2)",
          onComplete: () => {
            gsap.to(object.rotation, {
              x: object.userData.initialRotation.x,
              duration: 0.25,
              ease: "back.out(2)",
            });
          },
        });
      }
    });

    // 🔗 Social Media Links
    Object.entries(socialLinks).forEach(([key, url]) => {
      if (object.name.includes(key)) {
        const newWindow = window.open();
        newWindow.opener = null;
        newWindow.location = url;
        newWindow.target = "_blank";
        newWindow.rel = "noopener noreferrer";
      }
    });

    // 🏠 Handle Modal Popups
    if (object.name.includes("Work_Button")) {
      console.log("Switching to Work Section");
      onSectionChange(3);
    } else if (object.name.includes("About_Button")) {
      console.log("Switching to About Section");
      onSectionChange(1);
    } else if (object.name.includes("Contact_Button")) {
      console.log("Switching to Contact Section");
      onSectionChange(4);
    }
  }

  useEffect(() => {
    const canvas = gl.domElement;

    const handlePointerMove = (event) => {
      const rect = canvas.getBoundingClientRect();

      const x = (event.clientX - rect.left) / rect.width;
      const y = (event.clientY - rect.top) / rect.height;

      pointer.current.x = x * 2 - 1;
      pointer.current.y = -(y * 2 - 1);
    };

    window.addEventListener("pointermove", handlePointerMove);
    return () => window.removeEventListener("pointermove", handlePointerMove);
  }, [gl]);

  // Click event to detect clicked objects
  useEffect(() => {
    const handlePointerClick = () => {
      raycaster.current.setFromCamera(pointer.current, camera);
      const intersects = raycaster.current.intersectObjects(
        raycastableObjectsRef.current,
        true
      );

      if (intersects.length > 0) {
        handleRaycasterInteraction(intersects);
      }
    };

    window.addEventListener("click", handlePointerClick);
    return () => window.removeEventListener("click", handlePointerClick);
  }, []);

  useFrame(() => {
    raycaster.current.setFromCamera(pointer.current, camera);
    const currentIntersects = raycaster.current.intersectObjects(
      raycastableObjectsRef.current,
      true
    );

    if (currentIntersects.length > 0) {
      const currentIntersectObject = currentIntersects[0].object;

      if (currentIntersectObject.name.includes("Hover")) {
        if (currentIntersectObject !== hoveredObjectRef.current) {
          // Reset previous hover animation
          if (hoveredObjectRef.current) {
            playHoverAnimation(hoveredObjectRef.current, false);
          }

          // Apply hover animation to new object
          playHoverAnimation(currentIntersectObject, true);
          hoveredObjectRef.current = currentIntersectObject;
        }
      }

      // Update cursor if it's an interactive object
      document.body.style.cursor = currentIntersectObject.name.includes(
        "Pointer"
      )
        ? "pointer"
        : "default";
    } else {
      // Reset animation if nothing is hovered
      if (hoveredObjectRef.current) {
        playHoverAnimation(hoveredObjectRef.current, false);
        hoveredObjectRef.current = null;
      }
      document.body.style.cursor = "default";
    }
  });

  return (
    <group {...props} dispose={null} ref={mainRoomRef}>
      <mesh
        name="Fish_Bowl_Glass"
        geometry={nodes.Fish_Bowl_Glass.geometry}
        material={nodes.Fish_Bowl_Glass.material}
        position={[-0.707, 1.246, 1.154]}
      />
      <mesh
        name="Computer_Glass"
        geometry={nodes.Computer_Glass.geometry}
        material={nodes.Computer_Glass.material}
        position={[-2.2, 3.811, -3.193]}
      />
      <mesh
        name="Screen"
        geometry={nodes.Screen.geometry}
        material={nodes.Screen.material}
        position={[-2.855, 4.492, -1.492]}
      />
      <mesh
        name="Fish_Bowl_Water"
        geometry={nodes.Fish_Bowl_Water.geometry}
        material={nodes.Fish_Bowl_Water.material}
        position={[-0.707, 1.246, 1.154]}
      />
      <mesh
        name="About_Button_Third_Raycaster_Pointer_Hover"
        ref={aboutBtnRef}
        geometry={nodes.About_Button_Third_Raycaster_Pointer_Hover.geometry}
        material={nodes.About_Button_Third_Raycaster_Pointer_Hover.material}
        position={[-3.518, 5.65, 3.094]}
        rotation={[0, 1.526, -1.506]}
      />
      <mesh
        name="Contact_Button_Third_Raycaster_Pointer_Hover"
        ref={contactBtnRef}
        geometry={nodes.Contact_Button_Third_Raycaster_Pointer_Hover.geometry}
        material={nodes.Contact_Button_Third_Raycaster_Pointer_Hover.material}
        position={[-3.518, 3.732, 3.093]}
        rotation={[0, 1.526, -1.631]}
      />
      <mesh
        name="My_Work_Button_Third_Raycaster_Pointer_Hover"
        ref={workBtnRef}
        geometry={nodes.My_Work_Button_Third_Raycaster_Pointer_Hover.geometry}
        material={nodes.My_Work_Button_Third_Raycaster_Pointer_Hover.material}
        position={[-3.518, 4.748, 3.093]}
        rotation={[-0.873, 1.506, -0.76]}
      />
      <mesh
        name="Hanging_Plank_1_Third"
        ref={plank1Ref}
        geometry={nodes.Hanging_Plank_1_Third.geometry}
        material={nodes.Hanging_Plank_1_Third.material}
        position={[-3.56, 6.371, 2.112]}
        rotation={[-1.571, -1.557, -Math.PI]}
      />
      <mesh
        name="Hanging_Plank_2_Third"
        ref={plank2Ref}
        geometry={nodes.Hanging_Plank_2_Third.geometry}
        material={nodes.Hanging_Plank_2_Third.material}
        position={[-3.595, 6.29, 3.08]}
        rotation={[0, 1.526, 0]}
      />
      <mesh
        name="Boba_Plushie_Fourth_Raycaster_Hover"
        ref={bobaRef}
        geometry={nodes.Boba_Plushie_Fourth_Raycaster_Hover.geometry}
        material={nodes.Boba_Plushie_Fourth_Raycaster_Hover.material}
        position={[-2.921, 5.592, -3.978]}
        rotation={[0.003, 0.357, 0.032]}
      />
      <mesh
        name="GitHub_Fourth_Raycaster_Pointer_Hover"
        ref={githubRef}
        geometry={nodes.GitHub_Fourth_Raycaster_Pointer_Hover.geometry}
        material={nodes.GitHub_Fourth_Raycaster_Pointer_Hover.material}
        position={[-2.31, 5.619, -3.988]}
        rotation={[1.256, 0, 0]}
      />
      <mesh
        name="Twitter_Fourth_Raycaster_Pointer_Hover"
        ref={twitterRef}
        geometry={nodes.Twitter_Fourth_Raycaster_Pointer_Hover.geometry}
        material={nodes.Twitter_Fourth_Raycaster_Pointer_Hover.material}
        position={[-1.092, 5.625, -3.992]}
        rotation={[1.256, 0, 0]}
      />
      <mesh
        name="YouTube_Fourth_Raycaster_Pointer_Hover"
        ref={youtubeRef}
        geometry={nodes.YouTube_Fourth_Raycaster_Pointer_Hover.geometry}
        material={nodes.YouTube_Fourth_Raycaster_Pointer_Hover.material}
        position={[-1.694, 5.621, -3.989]}
        rotation={[1.256, 0, 0]}
      />
      <mesh
        ref={(el) => (yFanRefs.current["Fan_1"] = el)}
        name="Computer_Fan_1_Fourth_Raycaster"
        geometry={nodes.Computer_Fan_1_Fourth_Raycaster.geometry}
        material={nodes.Computer_Fan_1_Fourth_Raycaster.material}
        position={[-2.482, 3.671, -3.226]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        ref={(el) => (xFanRefs.current["Fan_2"] = el)}
        name="Computer_Fan_2_Fourth_Raycaster"
        geometry={nodes.Computer_Fan_2_Fourth_Raycaster.geometry}
        material={nodes.Computer_Fan_2_Fourth_Raycaster.material}
        position={[-3.074, 3.756, -3.564]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        name="Computer_Fan_3_Fourth_Raycaster"
        ref={(el) => (yFanRefs.current["Fan_3"] = el)}
        geometry={nodes.Computer_Fan_3_Fourth_Raycaster.geometry}
        material={nodes.Computer_Fan_3_Fourth_Raycaster.material}
        position={[-2.144, 3.671, -3.226]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        name="Computer_Fan_4_Fourth_Raycaster"
        ref={(el) => (xFanRefs.current["Fan_4"] = el)}
        geometry={nodes.Computer_Fan_4_Fourth_Raycaster.geometry}
        material={nodes.Computer_Fan_4_Fourth_Raycaster.material}
        position={[-3.074, 4.095, -3.564]}
        rotation={[0, 0, -Math.PI / 2]}
      />
      <mesh
        name="Computer_Fan_5_Fourth_Raycaster"
        ref={(el) => (yFanRefs.current["Fan_5"] = el)}
        geometry={nodes.Computer_Fan_5_Fourth_Raycaster.geometry}
        material={nodes.Computer_Fan_5_Fourth_Raycaster.material}
        position={[-1.804, 3.671, -3.226]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        ref={chairTopRef}
        name="Chair_Top_Fourth"
        geometry={nodes.Chair_Top_Fourth.geometry}
        material={nodes.Chair_Top_Fourth.material}
        position={[-0.816, 1.806, -1.82]}
      />
      <mesh
        name="Flower_1_Fourth_Hover_Raycaster"
        ref={flower1Ref}
        geometry={nodes.Flower_1_Fourth_Hover_Raycaster.geometry}
        material={nodes.Flower_1_Fourth_Hover_Raycaster.material}
        position={[-2.811, 3.36, 0.53]}
      />
      <mesh
        name="Flower_2_Fourth_Hover_Raycaster"
        ref={flower2Ref}
        geometry={nodes.Flower_2_Fourth_Hover_Raycaster.geometry}
        material={nodes.Flower_2_Fourth_Hover_Raycaster.material}
        position={[-2.936, 3.401, 0.563]}
      />
      <mesh
        name="Flower_3_Fourth_Hover_Raycaster"
        ref={flower3Ref}
        geometry={nodes.Flower_3_Fourth_Hover_Raycaster.geometry}
        material={nodes.Flower_3_Fourth_Hover_Raycaster.material}
        position={[-2.911, 3.363, 0.4]}
      />
      <mesh
        name="Kirby_Third_Hover_Raycaster"
        geometry={nodes.Kirby_Third_Hover_Raycaster.geometry}
        material={nodes.Kirby_Third_Hover_Raycaster.material}
        position={[1.497, 0.562, -2.029]}
      />
      <mesh
        ref={fishRef}
        name="Fish_Fourth_Hover_Raycaster"
        geometry={nodes.Fish_Fourth_Hover_Raycaster.geometry}
        material={nodes.Fish_Fourth_Hover_Raycaster.material}
        position={[-0.759, 1.655, 1.184]}
      />
      <mesh
        ref={hourHandRef}
        name="Hour_Hand_First"
        geometry={nodes.Hour_Hand_First.geometry}
        material={nodes.Hour_Hand_First.material}
        position={[-3.243, 6.39, -0.731]}
      />
      <mesh
        name="Minute_Hand_First"
        geometry={nodes.Minute_Hand_First.geometry}
        material={nodes.Minute_Hand_First.material}
        position={[-3.243, 6.39, -0.731]}
      />
      <mesh
        name="Lamp_First_Hover_Raycaster"
        ref={lampRef}
        geometry={nodes.Lamp_First_Hover_Raycaster.geometry}
        material={nodes.Lamp_First_Hover_Raycaster.material}
        position={[-0.775, 0.526, -3.196]}
      />
      <mesh
        name="Flower_4_Fourth_Raycaster_Hover"
        ref={flower4Ref}
        geometry={nodes.Flower_4_Fourth_Raycaster_Hover.geometry}
        material={nodes.Flower_4_Fourth_Raycaster_Hover.material}
        position={[-2.905, 3.992, 1.528]}
      />
      <mesh
        name="Flower_5_Fourth_Raycaster_Hover"
        ref={flower5Ref}
        geometry={nodes.Flower_5_Fourth_Raycaster_Hover.geometry}
        material={nodes.Flower_5_Fourth_Raycaster_Hover.material}
        position={[-2.866, 4.036, 1.467]}
      />
      <mesh
        name="Egg_1_Fourth_Hover_Raycaster"
        ref={egg1Ref}
        geometry={nodes.Egg_1_Fourth_Hover_Raycaster.geometry}
        material={nodes.Egg_1_Fourth_Hover_Raycaster.material}
        position={[-3.066, 6.566, -2.284]}
      />
      <mesh
        name="Egg_2_Fourth_Hover_Raycaster"
        ref={egg2Ref}
        geometry={nodes.Egg_2_Fourth_Hover_Raycaster.geometry}
        material={nodes.Egg_2_Fourth_Hover_Raycaster.material}
        position={[-2.996, 6.566, -2.409]}
      />
      <mesh
        name="Egg_3_Fourth_Hover_Raycaster"
        ref={egg3Ref}
        geometry={nodes.Egg_3_Fourth_Hover_Raycaster.geometry}
        material={nodes.Egg_3_Fourth_Hover_Raycaster.material}
        position={[-3.135, 6.566, -2.411]}
      />
      <mesh
        name="Pencil_1_Fourth_Hover_Raycaster"
        geometry={nodes.Pencil_1_Fourth_Hover_Raycaster.geometry}
        material={nodes.Pencil_1_Fourth_Hover_Raycaster.material}
        position={[-2.677, 2.864, 1.611]}
      />
      <mesh
        name="Pencil_2_Fourth_Hover_Raycaster"
        geometry={nodes.Pencil_2_Fourth_Hover_Raycaster.geometry}
        material={nodes.Pencil_2_Fourth_Hover_Raycaster.material}
        position={[-2.712, 2.858, 1.568]}
      />
      <mesh
        name="Pencil_3_Fourth_Hover_Raycaster"
        geometry={nodes.Pencil_3_Fourth_Hover_Raycaster.geometry}
        material={nodes.Pencil_3_Fourth_Hover_Raycaster.material}
        position={[-2.653, 2.862, 1.54]}
      />
      <mesh
        name="A#1_Key_Pointer_Raycaster_Third"
        geometry={nodes["A#1_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["A#1_Key_Pointer_Raycaster_Third"].material}
        position={[0.662, 2.743, -3.616]}
      />
      <mesh
        name="A#2_Key_Pointer_Raycaster_Third"
        geometry={nodes["A#2_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["A#2_Key_Pointer_Raycaster_Third"].material}
        position={[2.14, 2.743, -3.616]}
      />
      <mesh
        name="A1_Key_Pointer_Raycaster_Third"
        geometry={nodes.A1_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.A1_Key_Pointer_Raycaster_Third.material}
        position={[0.553, 2.671, -3.617]}
      />
      <mesh
        name="A2_Key_Pointer_Raycaster_Third"
        geometry={nodes.A2_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.A2_Key_Pointer_Raycaster_Third.material}
        position={[2.038, 2.671, -3.617]}
      />
      <mesh
        name="B1_Key_Pointer_Raycaster_Third"
        geometry={nodes.B1_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.B1_Key_Pointer_Raycaster_Third.material}
        position={[0.765, 2.671, -3.617]}
      />
      <mesh
        name="B2_Key_Pointer_Raycaster_Third"
        geometry={nodes.B2_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.B2_Key_Pointer_Raycaster_Third.material}
        position={[2.25, 2.671, -3.617]}
      />
      <mesh
        name="C#1_Key_Pointer_Raycaster_Third"
        geometry={nodes["C#1_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["C#1_Key_Pointer_Raycaster_Third"].material}
        position={[-0.404, 2.743, -3.616]}
      />
      <mesh
        name="C#2_Key_Pointer_Raycaster_Third"
        geometry={nodes["C#2_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["C#2_Key_Pointer_Raycaster_Third"].material}
        position={[1.074, 2.743, -3.616]}
      />
      <mesh
        name="C1_Key_Pointer_Raycaster_Third"
        geometry={nodes.C1_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.C1_Key_Pointer_Raycaster_Third.material}
        position={[-0.508, 2.671, -3.617]}
      />
      <mesh
        name="C2_Key_Pointer_Raycaster_Third"
        geometry={nodes.C2_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.C2_Key_Pointer_Raycaster_Third.material}
        position={[0.977, 2.671, -3.617]}
      />
      <mesh
        name="D#1_Key_Pointer_Raycaster_Third"
        geometry={nodes["D#1_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["D#1_Key_Pointer_Raycaster_Third"].material}
        position={[-0.19, 2.743, -3.616]}
      />
      <mesh
        name="D#2_Key_Pointer_Raycaster_Third"
        geometry={nodes["D#2_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["D#2_Key_Pointer_Raycaster_Third"].material}
        position={[1.288, 2.743, -3.616]}
      />
      <mesh
        name="D1_Key_Pointer_Raycaster_Third"
        geometry={nodes.D1_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.D1_Key_Pointer_Raycaster_Third.material}
        position={[-0.296, 2.671, -3.617]}
      />
      <mesh
        name="D2_Key_Pointer_Raycaster_Third"
        geometry={nodes.D2_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.D2_Key_Pointer_Raycaster_Third.material}
        position={[1.189, 2.671, -3.617]}
      />
      <mesh
        name="E1_Key_Pointer_Raycaster_Third"
        geometry={nodes.E1_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.E1_Key_Pointer_Raycaster_Third.material}
        position={[-0.083, 2.671, -3.617]}
      />
      <mesh
        name="E2_Key_Pointer_Raycaster_Third"
        geometry={nodes.E2_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.E2_Key_Pointer_Raycaster_Third.material}
        position={[1.402, 2.671, -3.617]}
      />
      <mesh
        name="F#1_Key_Pointer_Raycaster_Third"
        geometry={nodes["F#1_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["F#1_Key_Pointer_Raycaster_Third"].material}
        position={[0.234, 2.743, -3.616]}
      />
      <mesh
        name="F#2_Key_Pointer_Raycaster_Third"
        geometry={nodes["F#2_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["F#2_Key_Pointer_Raycaster_Third"].material}
        position={[1.712, 2.743, -3.616]}
      />
      <mesh
        name="F1_Key_Pointer_Raycaster_Third"
        geometry={nodes.F1_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.F1_Key_Pointer_Raycaster_Third.material}
        position={[0.129, 2.671, -3.617]}
      />
      <mesh
        name="F2_Key_Pointer_Raycaster_Third"
        geometry={nodes.F2_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.F2_Key_Pointer_Raycaster_Third.material}
        position={[1.614, 2.671, -3.617]}
      />
      <mesh
        name="G#1_Key_Pointer_Raycaster_Third"
        geometry={nodes["G#1_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["G#1_Key_Pointer_Raycaster_Third"].material}
        position={[0.448, 2.743, -3.616]}
      />
      <mesh
        name="G#2_Key_Pointer_Raycaster_Third"
        geometry={nodes["G#2_Key_Pointer_Raycaster_Third"].geometry}
        material={nodes["G#2_Key_Pointer_Raycaster_Third"].material}
        position={[1.926, 2.743, -3.616]}
      />
      <mesh
        name="G1_Key_Pointer_Raycaster_Third"
        geometry={nodes.G1_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.G1_Key_Pointer_Raycaster_Third.material}
        position={[0.341, 2.671, -3.617]}
      />
      <mesh
        name="G2_Key_Pointer_Raycaster_Third"
        geometry={nodes.G2_Key_Pointer_Raycaster_Third.geometry}
        material={nodes.G2_Key_Pointer_Raycaster_Third.material}
        position={[1.826, 2.671, -3.617]}
      />
      <mesh
        name="Name_Platform_Third"
        geometry={nodes.Name_Platform_Third.geometry}
        material={nodes.Name_Platform_Third.material}
        position={[1.318, 3.376, -4.219]}
      />
      <mesh
        name="Bulb_1_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_1_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_1_Fourth_Raycaster_Hover_2.material}
        position={[-2.846, 5.621, 0.33]}
      />
      <mesh
        name="Bulb_2_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_2_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_2_Fourth_Raycaster_Hover_2.material}
        position={[-2.787, 5.583, -0.163]}
      />
      <mesh
        name="Bulb_3_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_3_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_3_Fourth_Raycaster_Hover_2.material}
        position={[-2.772, 5.642, -0.66]}
      />
      <mesh
        name="Bulb_4_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_4_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_4_Fourth_Raycaster_Hover_2.material}
        position={[-2.796, 5.81, -1.13]}
      />
      <mesh
        name="Bulb_5_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_5_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_5_Fourth_Raycaster_Hover_2.material}
        position={[-2.873, 6.01, -1.574]}
      />
      <mesh
        name="Bulb_6_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_6_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_6_Fourth_Raycaster_Hover_2.material}
        position={[-3.119, 6.189, -2.499]}
      />
      <mesh
        name="Bulb_7_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_7_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_7_Fourth_Raycaster_Hover_2.material}
        position={[-2.85, 5.862, -2.681]}
      />
      <mesh
        name="Bulb_8_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_8_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_8_Fourth_Raycaster_Hover_2.material}
        position={[-2.603, 5.607, -3.027]}
      />
      <mesh
        name="Bulb_9_Fourth_Raycaster_Hover_2"
        geometry={nodes.Bulb_9_Fourth_Raycaster_Hover_2.geometry}
        material={nodes.Bulb_9_Fourth_Raycaster_Hover_2.material}
        position={[-2.443, 5.5, -3.48]}
      />
      <mesh
        name="Slipper_1_Fourth_Hover_Raycaster"
        ref={slippers1Ref}
        geometry={nodes.Slipper_1_Fourth_Hover_Raycaster.geometry}
        material={nodes.Slipper_1_Fourth_Hover_Raycaster.material}
        position={[-2.116, 0.526, -1.638]}
      />
      <mesh
        name="Slipper_2_Fourth_Hover_Raycaster"
        ref={slippers2Ref}
        geometry={nodes.Slipper_2_Fourth_Hover_Raycaster.geometry}
        material={nodes.Slipper_2_Fourth_Hover_Raycaster.material}
        position={[-2.733, 0.524, -2.42]}
      />
      <mesh
        name="Coffee_Mug_Fourth_Raycaster_Hover"
        geometry={nodes.Coffee_Mug_Fourth_Raycaster_Hover.geometry}
        material={nodes.Coffee_Mug_Fourth_Raycaster_Hover.material}
        position={[-1.593, 3.091, -0.267]}
      />
      <mesh
        name="Poro_Raycaster_Hover_Fourth"
        geometry={nodes.Poro_Raycaster_Hover_Fourth.geometry}
        material={nodes.Poro_Raycaster_Hover_Fourth.material}
        position={[-2.648, 3.474, -0.843]}
      />
      <mesh
        name="MrRabbit_Fourth_Raycaster_Hover"
        geometry={nodes.MrRabbit_Fourth_Raycaster_Hover.geometry}
        material={nodes.MrRabbit_Fourth_Raycaster_Hover.material}
        position={[-2.646, 3.461, -2.252]}
      />
      <mesh
        name="MrRabbit_Son_Raycaster_Fourth_Hover"
        geometry={nodes.MrRabbit_Son_Raycaster_Fourth_Hover.geometry}
        material={nodes.MrRabbit_Son_Raycaster_Fourth_Hover.material}
        position={[-2.706, 3.465, -2.01]}
      />
      <mesh
        name="Seaweed_1_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_1_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_1_Hover_Third_Raycaster.material}
        position={[3.328, -0.6, -4.308]}
      />
      <mesh
        name="Seaweed_2_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_2_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_2_Hover_Third_Raycaster.material}
        position={[3.191, -0.672, -3.041]}
      />
      <mesh
        name="Seaweed_3_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_3_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_3_Hover_Third_Raycaster.material}
        position={[3.245, -0.453, -3.609]}
      />
      <mesh
        name="Seaweed_4_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_4_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_4_Hover_Third_Raycaster.material}
        position={[3.544, -0.541, -1.235]}
      />
      <mesh
        name="Seaweed_5_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_5_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_5_Hover_Third_Raycaster.material}
        position={[2.952, -0.777, 2.205]}
      />
      <mesh
        name="Seaweed_6_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_6_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_6_Hover_Third_Raycaster.material}
        position={[2.445, -0.436, 2.491]}
      />
      <mesh
        name="Seaweed_7_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_7_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_7_Hover_Third_Raycaster.material}
        position={[1.957, -0.561, 2.609]}
      />
      <mesh
        name="Seaweed_8_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_8_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_8_Hover_Third_Raycaster.material}
        position={[-0.964, -0.514, 2.937]}
      />
      <mesh
        name="Seaweed_9_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_9_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_9_Hover_Third_Raycaster.material}
        position={[-1.363, -0.209, 2.506]}
      />
      <mesh
        name="Seaweed_10_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_10_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_10_Hover_Third_Raycaster.material}
        position={[-2.686, -0.358, 2.679]}
      />
      <mesh
        name="Seaweed_11_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_11_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_11_Hover_Third_Raycaster.material}
        position={[-3.316, 0.03, 2.684]}
      />
      <mesh
        name="Seaweed_12_Hover_Third_Raycaster"
        geometry={nodes.Seaweed_12_Hover_Third_Raycaster.geometry}
        material={nodes.Seaweed_12_Hover_Third_Raycaster.material}
        position={[-3.436, -0.722, 3.086]}
      />
      <mesh
        name="Microphone_Hover_Third_Raycaster"
        geometry={nodes.Microphone_Hover_Third_Raycaster.geometry}
        material={nodes.Microphone_Hover_Third_Raycaster.material}
        position={[2.353, 2.837, -3.837]}
      />
      <mesh
        name="Box_1_Hover_Fourth_Raycaster"
        ref={box1Ref}
        geometry={nodes.Box_1_Hover_Fourth_Raycaster.geometry}
        material={nodes.Box_1_Hover_Fourth_Raycaster.material}
        position={[-2.565, 0.827, -0.576]}
      />
      <mesh
        name="Box_2_Hover_Fourth_Raycaster"
        ref={box2Ref}
        geometry={nodes.Box_2_Hover_Fourth_Raycaster.geometry}
        material={nodes.Box_2_Hover_Fourth_Raycaster.material}
        position={[-2.449, 1.389, -0.566]}
      />
      <mesh
        name="Box_3_Hover_Fourth_Raycaster"
        ref={box3Ref}
        geometry={nodes.Box_3_Hover_Fourth_Raycaster.geometry}
        material={nodes.Box_3_Hover_Fourth_Raycaster.material}
        position={[-2.384, 1.809, -0.536]}
      />
      <mesh
        name="Rock_1_Third_Raycaster_Hover"
        geometry={nodes.Rock_1_Third_Raycaster_Hover.geometry}
        material={nodes.Rock_1_Third_Raycaster_Hover.material}
        position={[2.364, -1.337, -6.425]}
      />
      <mesh
        name="Rock_2_Third_Raycaster_Hover"
        geometry={nodes.Rock_2_Third_Raycaster_Hover.geometry}
        material={nodes.Rock_2_Third_Raycaster_Hover.material}
        position={[3.713, -0.808, -2.355]}
      />
      <mesh
        name="Rock_3_Third_Raycaster_Hover"
        geometry={nodes.Rock_3_Third_Raycaster_Hover.geometry}
        material={nodes.Rock_3_Third_Raycaster_Hover.material}
        position={[4.45, -1.075, 0.484]}
      />
      <mesh
        name="Rock_4_Third_Raycaster_Hover"
        geometry={nodes.Rock_4_Third_Raycaster_Hover.geometry}
        material={nodes.Rock_4_Third_Raycaster_Hover.material}
        position={[3.51, -0.879, 0.491]}
      />
      <mesh
        name="Rock_5_Third_Raycaster_Hover"
        geometry={nodes.Rock_5_Third_Raycaster_Hover.geometry}
        material={nodes.Rock_5_Third_Raycaster_Hover.material}
        position={[0.121, -0.797, 2.686]}
      />
      <mesh
        name="Rock_6_Third_Raycaster_Hover"
        geometry={nodes.Rock_6_Third_Raycaster_Hover.geometry}
        material={nodes.Rock_6_Third_Raycaster_Hover.material}
        position={[-2.107, -0.813, 3.139]}
      />
      <mesh
        name="Rock_7_Third_Raycaster_Hover"
        geometry={nodes.Rock_7_Third_Raycaster_Hover.geometry}
        material={nodes.Rock_7_Third_Raycaster_Hover.material}
        position={[-5.323, -1.171, 1.8]}
      />
      <mesh
        name="Frame_1_Second_Raycaster_Hover"
        ref={frame1Ref}
        geometry={nodes.Frame_1_Second_Raycaster_Hover.geometry}
        material={nodes.Frame_1_Second_Raycaster_Hover.material}
        position={[-2.841, 5.948, 1.333]}
      />
      <mesh
        name="Frame_2_Second_Raycaster_Hover"
        ref={frame2Ref}
        geometry={nodes.Frame_2_Second_Raycaster_Hover.geometry}
        material={nodes.Frame_2_Second_Raycaster_Hover.material}
        position={[-2.934, 5.787, 0.523]}
      />
      <mesh
        name="Frame_3_Second_Raycaster_Hover"
        ref={frame3Ref}
        geometry={nodes.Frame_3_Second_Raycaster_Hover.geometry}
        material={nodes.Frame_3_Second_Raycaster_Hover.material}
        position={[-2.907, 4.858, 0.879]}
      />
      <mesh
        name="Cactus_Raycaster_Fourth_Hover"
        geometry={nodes.Cactus_Raycaster_Fourth_Hover.geometry}
        material={nodes.Cactus_Raycaster_Fourth_Hover.material}
        position={[-2.914, 4.847, 0.201]}
      />
      <mesh
        name="Flower_Basket_Raycaster_Hover_Fourth"
        geometry={nodes.Flower_Basket_Raycaster_Hover_Fourth.geometry}
        material={nodes.Flower_Basket_Raycaster_Hover_Fourth.material}
        position={[-2.174, 2.283, 1.114]}
      />
      <mesh
        name="Headphones_Fourth_Raycaster_Hover"
        geometry={nodes.Headphones_Fourth_Raycaster_Hover.geometry}
        material={nodes.Headphones_Fourth_Raycaster_Hover.material}
        position={[-2.123, 3.079, 0.258]}
      />
      <mesh
        name="Mouth_Raycaster_Hover_Fourth"
        geometry={nodes.Mouth_Raycaster_Hover_Fourth.geometry}
        material={nodes.Mouth_Raycaster_Hover_Fourth.material}
        position={[-1.859, 3.161, -2.705]}
      />
      <mesh
        name="Keyboard_1_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_1_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_1_Fourth_Raycaster_Hover.material}
        position={[-2.027, 3.247, -1.134]}
      />
      <mesh
        name="Keyboard_2_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_2_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_2_Fourth_Raycaster_Hover.material}
        position={[-2.027, 3.247, -1.342]}
      />
      <mesh
        name="Keyboard_3_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_3_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_3_Fourth_Raycaster_Hover.material}
        position={[-2.027, 3.247, -1.549]}
      />
      <mesh
        name="Keyboard_4_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_4_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_4_Fourth_Raycaster_Hover.material}
        position={[-2.027, 3.247, -1.756]}
      />
      <mesh
        name="Keyboard_5_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_5_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_5_Fourth_Raycaster_Hover.material}
        position={[-2.027, 3.247, -1.963]}
      />
      <mesh
        name="Keyboard_6_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_6_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_6_Fourth_Raycaster_Hover.material}
        position={[-1.912, 3.243, -1.134]}
      />
      <mesh
        name="Keyboard_7_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_7_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_7_Fourth_Raycaster_Hover.material}
        position={[-1.912, 3.243, -1.342]}
      />
      <mesh
        name="Keyboard_8_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_8_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_8_Fourth_Raycaster_Hover.material}
        position={[-1.912, 3.243, -1.549]}
      />
      <mesh
        name="Keyboard_9_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_9_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_9_Fourth_Raycaster_Hover.material}
        position={[-1.912, 3.243, -1.756]}
      />
      <mesh
        name="Keyboard_10_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_10_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_10_Fourth_Raycaster_Hover.material}
        position={[-1.912, 3.243, -1.963]}
      />
      <mesh
        name="Keyboard_11_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_11_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_11_Fourth_Raycaster_Hover.material}
        position={[-1.796, 3.239, -1.134]}
      />
      <mesh
        name="Keyboard_12_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_12_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_12_Fourth_Raycaster_Hover.material}
        position={[-1.796, 3.239, -1.342]}
      />
      <mesh
        name="Keyboard_13_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_13_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_13_Fourth_Raycaster_Hover.material}
        position={[-1.796, 3.239, -1.549]}
      />
      <mesh
        name="Keyboard_14_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_14_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_14_Fourth_Raycaster_Hover.material}
        position={[-1.796, 3.239, -1.756]}
      />
      <mesh
        name="Keyboard_15_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_15_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_15_Fourth_Raycaster_Hover.material}
        position={[-1.796, 3.239, -1.963]}
      />
      <mesh
        name="Keyboard_16_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_16_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_16_Fourth_Raycaster_Hover.material}
        position={[-1.681, 3.235, -1.134]}
      />
      <mesh
        name="Keyboard_17_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_17_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_17_Fourth_Raycaster_Hover.material}
        position={[-1.681, 3.235, -1.342]}
      />
      <mesh
        name="Keyboard_18_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_18_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_18_Fourth_Raycaster_Hover.material}
        position={[-1.681, 3.235, -1.549]}
      />
      <mesh
        name="Keyboard_19_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_19_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_19_Fourth_Raycaster_Hover.material}
        position={[-1.681, 3.235, -1.756]}
      />
      <mesh
        name="Keyboard_20_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_20_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_20_Fourth_Raycaster_Hover.material}
        position={[-1.681, 3.235, -1.963]}
      />
      <mesh
        name="Keyboard_21_Fourth_Raycaster_Hover"
        geometry={nodes.Keyboard_21_Fourth_Raycaster_Hover.geometry}
        material={nodes.Keyboard_21_Fourth_Raycaster_Hover.material}
        position={[-1.541, 3.235, -1.54]}
      />
      <mesh
        name="Book_1_Fourth"
        geometry={nodes.Book_1_Fourth.geometry}
        material={nodes.Book_1_Fourth.material}
        position={[-2.449, 4.369, -3.614]}
      />
      <mesh
        name="Book_2_Fourth"
        geometry={nodes.Book_2_Fourth.geometry}
        material={nodes.Book_2_Fourth.material}
        position={[-2.449, 4.369, -3.614]}
      />
      <mesh
        name="Pencil_Holder_Fourth"
        geometry={nodes.Pencil_Holder_Fourth.geometry}
        material={nodes.Pencil_Holder_Fourth.material}
        position={[-2.449, 4.369, -3.614]}
      />
      <mesh
        name="First"
        geometry={nodes.First.geometry}
        material={nodes.First.material}
        position={[-2.85, 5.862, -2.681]}
      />
      <mesh
        name="Second"
        geometry={nodes.Second.geometry}
        material={nodes.Second.material}
        position={[-2.85, 5.862, -2.681]}
      />
      <mesh
        name="Third"
        geometry={nodes.Third.geometry}
        material={nodes.Third.material}
        position={[-0.383, -0.517, -1.129]}
      />
      <mesh
        name="Fourth"
        geometry={nodes.Fourth.geometry}
        material={nodes.Fourth.material}
        position={[-2.449, 4.369, -3.614]}
      />
    </group>
  );
}

useGLTF.preload("models/main_room.glb");
